from _typeshed import Incomplete
from typing import Any
from seqlog.structured_logging import (
    ConsoleStructuredLogHandler as ConsoleStructuredLogHandler,
    SeqLogHandler as SeqLogHandler,
    StructuredLogger as StructuredLogger,
    StructuredRootLogger as StructuredRootLogger,
    set_callback_on_failure as set_callback_on_failure,
)

def configure_from_file(
    file_name: Any, override_root_logger: bool = ..., use_structured_logger: bool = ...
) -> None: ...
def configure_from_dict(
    config: Any, override_root_logger: bool = ..., use_structured_logger: bool = ...
) -> None: ...
def log_to_seq(
    server_url: Any,
    api_key: Incomplete | None = ...,
    level: Any = ...,
    batch_size: int = ...,
    auto_flush_timeout: Incomplete | None = ...,
    additional_handlers: Incomplete | None = ...,
    override_root_logger: bool = ...,
    json_encoder_class: Incomplete | None = ...,
    **kwargs: Any
) -> Any: ...
def log_to_console(level: Any = ..., override_root_logger: bool = ..., **kwargs: Any) -> None: ...
def get_global_log_properties() -> None: ...
def set_global_log_properties(**properties: Any) -> None: ...
def reset_global_log_properties() -> None: ...
def clear_global_log_properties() -> None: ...
