import logging
from _typeshed import Incomplete

DEFAULT_TCP_LOGGING_PORT: int
DEFAULT_UDP_LOGGING_PORT: int
DEFAULT_HTTP_LOGGING_PORT: int
DEFAULT_SOAP_LOGGING_PORT: int
SYSLOG_UDP_PORT: int
SYSLOG_TCP_PORT: int

class BaseRotatingHandler(logging.FileHandler):
    namer: Incomplete
    rotator: Incomplete
    mode: Incomplete
    encoding: Incomplete
    errors: Incomplete
    def __init__(self, filename, mode, encoding: Incomplete | None = ..., delay: bool = ..., errors: Incomplete | None = ...) -> None: ...
    def emit(self, record) -> None: ...
    def rotation_filename(self, default_name): ...
    def rotate(self, source, dest) -> None: ...

class RotatingFileHandler(BaseRotatingHandler):
    maxBytes: Incomplete
    backupCount: Incomplete
    def __init__(self, filename, mode: str = ..., maxBytes: int = ..., backupCount: int = ..., encoding: Incomplete | None = ..., delay: bool = ..., errors: Incomplete | None = ...) -> None: ...
    stream: Incomplete
    def doRollover(self) -> None: ...
    def shouldRollover(self, record): ...

class TimedRotatingFileHandler(BaseRotatingHandler):
    when: Incomplete
    backupCount: Incomplete
    utc: Incomplete
    atTime: Incomplete
    interval: int
    suffix: str
    extMatch: str
    dayOfWeek: Incomplete
    rolloverAt: Incomplete
    def __init__(self, filename, when: str = ..., interval: int = ..., backupCount: int = ..., encoding: Incomplete | None = ..., delay: bool = ..., utc: bool = ..., atTime: Incomplete | None = ..., errors: Incomplete | None = ...) -> None: ...
    def computeRollover(self, currentTime): ...
    def shouldRollover(self, record): ...
    def getFilesToDelete(self): ...
    stream: Incomplete
    def doRollover(self) -> None: ...

class WatchedFileHandler(logging.FileHandler):
    def __init__(self, filename, mode: str = ..., encoding: Incomplete | None = ..., delay: bool = ..., errors: Incomplete | None = ...) -> None: ...
    stream: Incomplete
    def reopenIfNeeded(self) -> None: ...
    def emit(self, record) -> None: ...

class SocketHandler(logging.Handler):
    host: Incomplete
    port: Incomplete
    address: Incomplete
    sock: Incomplete
    closeOnError: bool
    retryTime: Incomplete
    retryStart: float
    retryMax: float
    retryFactor: float
    def __init__(self, host, port) -> None: ...
    def makeSocket(self, timeout: int = ...): ...
    retryPeriod: Incomplete
    def createSocket(self) -> None: ...
    def send(self, s) -> None: ...
    def makePickle(self, record): ...
    def handleError(self, record) -> None: ...
    def emit(self, record) -> None: ...
    def close(self) -> None: ...

class DatagramHandler(SocketHandler):
    closeOnError: bool
    def __init__(self, host, port) -> None: ...
    def makeSocket(self): ...
    def send(self, s) -> None: ...

class SysLogHandler(logging.Handler):
    LOG_EMERG: int
    LOG_ALERT: int
    LOG_CRIT: int
    LOG_ERR: int
    LOG_WARNING: int
    LOG_NOTICE: int
    LOG_INFO: int
    LOG_DEBUG: int
    LOG_KERN: int
    LOG_USER: int
    LOG_MAIL: int
    LOG_DAEMON: int
    LOG_AUTH: int
    LOG_SYSLOG: int
    LOG_LPR: int
    LOG_NEWS: int
    LOG_UUCP: int
    LOG_CRON: int
    LOG_AUTHPRIV: int
    LOG_FTP: int
    LOG_NTP: int
    LOG_SECURITY: int
    LOG_CONSOLE: int
    LOG_SOLCRON: int
    LOG_LOCAL0: int
    LOG_LOCAL1: int
    LOG_LOCAL2: int
    LOG_LOCAL3: int
    LOG_LOCAL4: int
    LOG_LOCAL5: int
    LOG_LOCAL6: int
    LOG_LOCAL7: int
    priority_names: Incomplete
    facility_names: Incomplete
    priority_map: Incomplete
    address: Incomplete
    facility: Incomplete
    socktype: Incomplete
    unixsocket: bool
    socket: Incomplete
    def __init__(self, address=..., facility=..., socktype: Incomplete | None = ...) -> None: ...
    def encodePriority(self, facility, priority): ...
    def close(self) -> None: ...
    def mapPriority(self, levelName): ...
    ident: str
    append_nul: bool
    def emit(self, record) -> None: ...

class SMTPHandler(logging.Handler):
    username: Incomplete
    fromaddr: Incomplete
    toaddrs: Incomplete
    subject: Incomplete
    secure: Incomplete
    timeout: Incomplete
    def __init__(self, mailhost, fromaddr, toaddrs, subject, credentials: Incomplete | None = ..., secure: Incomplete | None = ..., timeout: float = ...) -> None: ...
    def getSubject(self, record): ...
    def emit(self, record) -> None: ...

class NTEventLogHandler(logging.Handler):
    appname: Incomplete
    dllname: Incomplete
    logtype: Incomplete
    deftype: Incomplete
    typemap: Incomplete
    def __init__(self, appname, dllname: Incomplete | None = ..., logtype: str = ...) -> None: ...
    def getMessageID(self, record): ...
    def getEventCategory(self, record): ...
    def getEventType(self, record): ...
    def emit(self, record) -> None: ...
    def close(self) -> None: ...

class HTTPHandler(logging.Handler):
    host: Incomplete
    url: Incomplete
    method: Incomplete
    secure: Incomplete
    credentials: Incomplete
    context: Incomplete
    def __init__(self, host, url, method: str = ..., secure: bool = ..., credentials: Incomplete | None = ..., context: Incomplete | None = ...) -> None: ...
    def mapLogRecord(self, record): ...
    def getConnection(self, host, secure): ...
    def emit(self, record) -> None: ...

class BufferingHandler(logging.Handler):
    capacity: Incomplete
    buffer: Incomplete
    def __init__(self, capacity) -> None: ...
    def shouldFlush(self, record): ...
    def emit(self, record) -> None: ...
    def flush(self) -> None: ...
    def close(self) -> None: ...

class MemoryHandler(BufferingHandler):
    flushLevel: Incomplete
    target: Incomplete
    flushOnClose: Incomplete
    def __init__(self, capacity, flushLevel=..., target: Incomplete | None = ..., flushOnClose: bool = ...) -> None: ...
    def shouldFlush(self, record): ...
    def setTarget(self, target) -> None: ...
    def flush(self) -> None: ...
    def close(self) -> None: ...

class QueueHandler(logging.Handler):
    queue: Incomplete
    def __init__(self, queue) -> None: ...
    def enqueue(self, record) -> None: ...
    def prepare(self, record): ...
    def emit(self, record) -> None: ...

class QueueListener:
    queue: Incomplete
    handlers: Incomplete
    respect_handler_level: Incomplete
    def __init__(self, queue, *handlers, respect_handler_level: bool = ...) -> None: ...
    def dequeue(self, block): ...
    def start(self) -> None: ...
    def prepare(self, record): ...
    def handle(self, record) -> None: ...
    def enqueue_sentinel(self) -> None: ...
    def stop(self) -> None: ...
