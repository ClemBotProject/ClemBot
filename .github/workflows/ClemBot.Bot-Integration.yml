# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: ClemBot.Bot Master integration

on:
  push:
    branches: [ master ]
    paths: 
      - "ClemBot.Bot/**"
  pull_request_target:
    types: [opened, synchronize, reopened, edited]
    branches: 'master'
    paths: 
      - "ClemBot.Bot/**"
  workflow_dispatch:

permissions:
  actions: read
  checks: read
  contents: read
  deployments: none
  id-token: none
  issues: none
  discussions: none
  packages: none
  pages: none
  pull-requests: write
  repository-projects: none
  security-events: none
  statuses: none
 
jobs:
  build: 
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ClemBot.Bot
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: install poetry
      uses: snok/install-poetry@v1.0.0
      with:
        version: 1.1.14
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv

    - name: load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: ClemBot.Bot/.venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/ClemBot.Bot-Integration.yml') }}

    - name: install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install 

    - name: Validate static typing
      id: static-typing-ci
      continue-on-error: true
      run: poetry run mypy

    - uses: actions/github-script@v3
      name: Static typing lint failure comment
      if: steps.static-typing-ci.outcome != 'success' && github.event_name == 'pull_request'
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Static type linting failed \n\n Please see CI error output for details and fix the PRs typing`
          })

    - name: Check if Black would make any changes
      id: black-ci
      continue-on-error: true
      run: poetry run black bot --check 

    - name: Check if isort would make any changes
      id: isort-ci
      continue-on-error: true
      run: poetry run isort --check-only .

    - uses: actions/github-script@v3
      name: Black lint failure comment
      if: steps.black-ci.outcome != 'success' && github.event_name == 'pull_request'
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Black linting failed \n\n Please run \`\`\`poetry run black bot\`\`\` from the \`ClemBot.Bot\` folder`
          })

    - uses: actions/github-script@v3
      name: Isort lint failure comment
      if: steps.isort-ci.outcome != 'success' && github.event_name == 'pull_request'
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Isort linting failed \n\n Please run \`\`\`poetry run isort .\`\`\` from the \`ClemBot.Bot\` folder`
          })

    - name: Fail PR if linting failed
      if: (steps.isort-ci.outcome != 'success' || steps.black-ci.outcome != 'success') && github.event_name == 'pull_request'
      uses: actions/github-script@v3
      with:
        script: |
            core.setFailed('Linting failed, please see PR comment for details')

    - name: Lint with pylint
      run: |
        poetry run python -m pylint bot -E -r y

    - name: Test with pytest
      run: |
        poetry run python -m pytest
